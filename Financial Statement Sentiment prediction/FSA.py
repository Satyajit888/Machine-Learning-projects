#!/usr/bin/env python
# coding: utf-8

# ## **This project is all about analyzing the sentiments of a dataset which involves Financial statements or better to say more of Financial news all around the world.We then train our model and then use is to predict any kind of Financial or economical statement from all around the globe.This Project is more helpful for research purpose as well.**

# ## **The following data is intended for advancing financial sentiment analysis research. It's two datasets (FiQA, Financial PhraseBank) combined into one easy-to-use CSV file. It provides financial sentences with sentiment labels.**

# ### Importing necessary packages and the dataset as well.

# In[3]:


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv('C:/Users/pande/OneDrive/Desktop/Financial Statement Sentiment prediction/Financial_dt.csv')


# In[4]:


df.head()


# ### Preprocessing of Dataset

# In[5]:


df.isnull().sum()


# In[6]:


df.info()


# In[7]:


# Checking if there is any duplicates in the dataset

df.duplicated().sum()


# In[8]:


# Dropping the duplicates

df.drop_duplicates(inplace=True)


# In[9]:


df.shape


# In[10]:


df['Sentiment'].value_counts()


# ### Inspecting Dataframe Structure

# In[11]:


neutral_count = 0
positive_count = 0
negative_count = 0

for i in df['Sentiment']:
    if i == 'neutral':
        neutral_count += 1
    elif i == 'positive':
        positive_count += 1
    elif i == 'negative':
        negative_count += 1

total_count = len(df)
neutral_percent = format((neutral_count / total_count) * 100, '.2f')
positive_percent = format((positive_count / total_count) * 100, '.2f')
negative_percent = format((negative_count / total_count) * 100, '.2f')

print(f'{neutral_percent}% people have neutral sentiment')
print(f'{positive_percent}% people have positive sentiment')
print(f'{negative_percent}% people have negative sentiment')


# In[12]:


sns.countplot(x='Sentiment',data=df)


# ### Problem Statement:
# The problem statement of financial sentiment analysis dataset is to predict the sentiment of financial news articles or social media posts related to financial markets or specific financial instruments, such as stocks or currencies.This dataset consists of text data, which is labeled as positive, negative or neutral based on the sentiment of the content. The sentiment may be related to the overall market sentiment or specific to a particular company, product or event. The goal of financial sentiment analysis is to extract insights from the large volumes of unstructured data generated by financial news and social media, and to provide an early warning system for investors and traders to make informed decisions. By analyzing the sentiment of news articles and social media posts, financial institutions can better understand the impact of news events on the financial markets, predict market trends and make more informed investment decisions.

# ### Model Building

# In[14]:


X = df['Sentence']
Y = df['Sentiment']


# In[15]:


from sklearn.model_selection import train_test_split
X_train,X_test,Y_train, Y_test = train_test_split(X,Y,test_size=0.2,random_state=10)
from sklearn.feature_extraction.text import CountVectorizer


# In[16]:


# Conversion of text to vector

v = CountVectorizer(stop_words='english')
X_train = v.fit_transform(X_train)
X_test = v.transform(X_test)


# In[17]:


from sklearn.naive_bayes import MultinomialNB


# In[18]:


multNB = MultinomialNB()
multNB.fit(X_train,Y_train)


# In[19]:


Y_pred = multNB.predict(X_test)


# In[20]:


# Model performance
from sklearn.metrics import accuracy_score


# In[21]:


accuracy_score(Y_test,Y_pred)


# ### Website Building

# In[18]:


import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

##df = pd.read_csv('Finance.csv')
X = df['Sentence']
Y = df['Sentiment']
X_train,X_test,Y_train, Y_test = train_test_split(X,Y,test_size=0.2,random_state=10)
v = CountVectorizer(stop_words='english')
X_train = v.fit_transform(X_train)
X_test = v.transform(X_test)
multNB = MultinomialNB()
multNB.fit(X_train,Y_train)

st.title('Sentiment Analysis')
sentence = st.text_input('Enter a sentence:')
if sentence:
    X_new = v.transform([sentence])
    Y_pred = multNB.predict(X_new)
    if Y_pred == 'positive':
        result = 'Positive'
    elif Y_pred == 'negative':
        result = 'Negative'
    else:
        result = 'Neutral'
    st.write(f"The sentiment of the sentence '{sentence}' is '{result}'")


# In[16]:





# In[ ]:




